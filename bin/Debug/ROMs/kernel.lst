
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass --long-address --intel-hex -o kernel.hex --list kernel.lst kernel.asm
; Wed Oct 03 10:36:28 2018

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm


;******  Processing file: macros_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: simulator_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;2 Bytes Color of next character to be printed to the screen.
=$000020				CURATTR          = $000020 ;2 Bytes Attribute of next character to be printed to the screen.
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$0000c0				KERNEL_TEMP      = $0000C0 ;32 Bytes Temp space for kernel
=$0000e0				USER_TEMP        = $0000E0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108				DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108				D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a				D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c				D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e				D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110				DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110				D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112				D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114				D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$0001ff				VECTOR_STATE     = $0001FF ;1 Byte  Interrupt Vector State. See VECTOR_STATE_ENUM
=$000200				CPU_REGISTERS    = $000200 ; Byte
=$000200				CPUPC            = $000200 ;2 Bytes Debug registers. When BRK is executed, Interrupt service routine will populate this block with the CPU registers.
=$000202				CPUPBR           = $000202 ;1 Byte  Program Bank Register (K)
=$000203				CPUDBR           = $000203 ;1 Byte  Data Bank Register (B)
=$000204				CPUFLAGS         = $000204 ;1 Byte  Flags (P) (The second byte is ignored)
=$000205				CPUA             = $000205 ;2 Bytes Accumulator (A)
=$000207				CPUX             = $000207 ;2 Bytes X Register
=$000209				CPUY             = $000209 ;2 Bytes Y Index Register
=$00020b				CPUDP            = $00020B ;2 Bytes Direct Page Register (D)
=$00020d				CPUSTACK         = $00020D ;2 Bytes Stack Pointer
=$000210				MONITOR_VARS     = $000210 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000210				MCMDADDR         = $000210 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000213				MCMP_TEXT        = $000213 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000216				MCMP_LEN         = $000216 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000218				MCMD             = $000218 ;3 Bytes Address of the current command/function string
=$00021b				MCMD_LEN         = $00021B ;2 Bytes Length of the current command/function string
=$00021d				MARG1            = $00021D ;4 Bytes First command argument. May be data or address, depending on command
=$000221				MARG2            = $000221 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000225				MARG3            = $000225 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000229				MARG4            = $000229 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00022d				MARG5            = $00022D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000231				MARG6            = $000231 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000235				MARG7            = $000235 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000239				MARG8            = $000239 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000f00				KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$40					KEY_BUFFER_SIZE  = $40 ;64 Bytes (constant) keyboard buffer length
=$000f3f				KEY_BUFFER_END   = $000F3F ;1 Byte  Last byte of keyboard buffer
=$000f40				KEY_BUFFER_RPOS  = $000F40 ;2 Bytes keyboard buffer read position
=$000f42				KEY_BUFFER_WPOS  = $000F42 ;2 Bytes keyboard buffer write position
=$001000				TEST_BEGIN       = $001000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60				HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80				Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000				VECTORS_END      = $010000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: kernel.asm


;******  Processing file: page_00_data.asm

>0000	00 00 00 00 00 00 00 00		                .fill 12,0          ; unused_0000, 12 bytes, unused
>0008	00 00 00 00
>000c	00 00 80			                .long $800000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>000f	50 00				                .word 80            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0011	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>0013	3c 00				                .word 60            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>0015	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>0017	00 00 80			                .long $800000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>001a	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>001c	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>001e	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>001f	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>0020	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>0022	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: kernel.asm


;******  Processing file: page_00_code.asm

.ff00	18		clc		RHRESET         CLC
.ff01	fb		xce		                XCE
.ff02	5c 00 00 01	jmp $010000	                JML BOOT
.ff10					RHCOP
.ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12	8b		phb		                PHB
.ff13	0b		phd		                PHD
.ff14	48		pha		                PHA
.ff15	da		phx		                PHX
.ff16	5a		phy		                PHY
.ff17	5c 08 00 01	jmp $010008	                JML BREAK
.ff20					RHBRK
.ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22	8b		phb		                PHB
.ff23	0b		phd		                PHD
.ff24	48		pha		                PHA
.ff25	da		phx		                PHX
.ff26	5a		phy		                PHY
.ff27	5c 08 00 01	jmp $010008	                JML BREAK
.ff30					RHABORT
.ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32	8b		phb		                PHB
.ff33	0b		phd		                PHD
.ff34	48		pha		                PHA
.ff35	da		phx		                PHX
.ff36	5a		phy		                PHY
.ff37	5c 08 00 01	jmp $010008	                JML BREAK
.ff40					 RHNMI
.ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42	8b		phb		                PHB
.ff43	0b		phd		                PHD
.ff44	48		pha		                PHA
.ff45	da		phx		                PHX
.ff46	5a		phy		                PHY
.ff47	7a		ply		                PLY
.ff48	fa		plx		                PLX
.ff49	68		pla		                PLA
.ff4a	2b		pld		                PLD
.ff4b	ab		plb		                PLB
.ff4c	40		rti		                RTI
.ff60					RHIRQ
.ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62	8b		phb		                PHB
.ff63	0b		phd		                PHD
.ff64	48		pha		                PHA
.ff65	da		phx		                PHX
.ff66	5a		phy		                PHY
.ff67	7a		ply		                PLY
.ff68	fa		plx		                PLX
.ff69	68		pla		                PLA
.ff6a	2b		pld		                PLD
.ff6b	ab		plb		                PLB
.ff6c	40		rti		                RTI
.ffe0	5c 0c 00 01	jmp $01000c	JUMP_READY      JML READY      ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4	10 ff				RVECTOR_COP     .word HCOP     ; FFE4
>ffe6	20 ff				RVECTOR_BRK     .word HBRK     ; FFE6
>ffe8	30 ff				RVECTOR_ABORT   .word HABORT   ; FFE8
>ffea	40 ff				RVECTOR_NMI     .word HNMI     ; FFEA
>ffec	00 00				                .word $0000    ; FFEC
>ffee	60 ff				RVECTOR_IRQ     .word HIRQ     ; FFEE
>fff0	00 00				                .word $0000    ; FFF0
>fff2	00 00				                .word $0000    ; FFF2
>fff4	10 ff				RVECTOR_ECOP    .word HCOP     ; FFF4
>fff6	20 ff				RVECTOR_EBRK    .word HBRK     ; FFF6
>fff8	30 ff				RVECTOR_EABORT  .word HABORT   ; FFF8
>fffa	40 ff				RVECTOR_ENMI    .word HNMI     ; FFFA
>fffc	00 ff				RVECTOR_ERESET  .word HRESET   ; FFFC
>fffe	60 ff				RVECTOR_EIRQ    .word HIRQ     ; FFFE

;******  Return to file: kernel.asm


;******  Processing file: dram_inc.asm

=$800000				SCREEN_PAGE0     = $800000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$802000				SCREEN_PAGE1     = $802000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$804000				SCREEN_PAGE2     = $804000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$806000				SCREEN_PAGE3     = $806000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$808000				SCREEN_END       = $808000 ;End of display memory

;******  Return to file: kernel.asm


;******  Processing file: kernel_jumptable.asm

.010000	5c 00 04 01	jmp $010400	BOOT            JML IBOOT
.010004	5c f1 05 01	jmp $0105f1	RESTORE         JML IRESTORE
.010008	5c 70 04 01	jmp $010470	BREAK           JML IBREAK
.01000c	5c b3 04 01	jmp $0104b3	READY           JML IREADY
.010010	5c f2 05 01	jmp $0105f2	SCINIT          JML ISCINIT
.010014	5c f3 05 01	jmp $0105f3	IOINIT          JML IIOINIT
.010018	5c 2f 05 01	jmp $01052f	PUTC            JML IPUTC
.01001c	5c 18 05 01	jmp $010518	PUTS            JML IPUTS
.010020	5c 5c 05 01	jmp $01055c	PUTB            JML IPUTB
.010024	5c f4 05 01	jmp $0105f4	PUTBLOCK        JML IPUTBLOCK
.010028	5c f5 05 01	jmp $0105f5	SETLFS          JML ISETLFS
.01002c	5c f6 05 01	jmp $0105f6	SETNAM          JML ISETNAM
.010030	5c f7 05 01	jmp $0105f7	OPEN            JML IOPEN
.010034	5c f8 05 01	jmp $0105f8	CLOSE           JML ICLOSE
.010038	5c f9 05 01	jmp $0105f9	SETIN           JML ISETIN
.01003c	5c fa 05 01	jmp $0105fa	SETOUT          JML ISETOUT
.010040	5c fb 05 01	jmp $0105fb	GETB            JML IGETB
.010044	5c fc 05 01	jmp $0105fc	GETBLOCK        JML IGETBLOCK
.010048	5c fd 05 01	jmp $0105fd	GETCH           JML IGETCH
.01004c	5c de 04 01	jmp $0104de	GETCHW          JML IGETCHW
.010050	5c d5 04 01	jmp $0104d5	GETCHE          JML IGETCHE
.010054	5c fe 05 01	jmp $0105fe	GETS            JML IGETS
.010058	5c ff 05 01	jmp $0105ff	GETLINE         JML IGETLINE
.01005c	5c 00 06 01	jmp $010600	GETFIELD        JML IGETFIELD
.010060	5c 01 06 01	jmp $010601	TRIM            JML ITRIM
.010064	5c 02 06 01	jmp $010602	PRINTC          JML IPRINTC
.010068	5c 03 06 01	jmp $010603	PRINTS          JML IPRINTS
.01006c	5c 5d 05 01	jmp $01055d	PRINTCR         JML IPRINTCR
.010070	5c 04 06 01	jmp $010604	PRINTF          JML IPRINTF
.010074	5c 05 06 01	jmp $010605	PRINTI          JML IPRINTI
.010078	5c 06 06 01	jmp $010606	PRINTH          JML IPRINTH
.01007c	5c 07 06 01	jmp $010607	PRINTAI         JML IPRINTAI
.010080	5c 08 06 01	jmp $010608	PRINTAH         JML IPRINTAH
.010084	5c ab 05 01	jmp $0105ab	LOCATE          JML ILOCATE
.010088	5c 09 06 01	jmp $010609	PUSHKEY         JML IPUSHKEY
.01008c	5c 0a 06 01	jmp $01060a	PUSHKEYS        JML IPUSHKEYS
.010090	5c 7e 05 01	jmp $01057e	CSRRIGHT        JML ICSRRIGHT
.010094	5c 0b 06 01	jmp $01060b	CSRLEFT         JML ICSRLEFT
.010098	5c a9 05 01	jmp $0105a9	CSRUP           JML ICSRUP
.01009c	5c aa 05 01	jmp $0105aa	CSRDOWN         JML ICSRDOWN
.0100a0	5c 0c 06 01	jmp $01060c	CSRHOME         JML ICSRHOME
.0100a4	5c d7 05 01	jmp $0105d7	SCROLLUP        JML ISCROLLUP

;******  Return to file: kernel.asm

.010400					IBOOT
.010400	18		clc		                CLC           ; clear the carry flag
.010401	fb		xce		                XCE           ; move carry to emulation flag.
.010402	c2 30		rep #$30	                REP #$30        ; set A&X long
.010404	a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.010407	1b		tcs		                TAS
.010408	48		pha		                PHA             ; begin setdp macro
.010409	08		php			PHP
.01040a	c2 20		rep #$20	                REP #$20        ; set A long
.01040c	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.01040f	5b		tcd		                TCD
.010410	28		plp			PLP
.010411	68		pla		                PLA             ; end setdp macro
.010412	a9 00 00	lda #$0000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.010415	85 0c		sta $0c		                STA SCREENBEGIN
.010417	e2 20		sep #$20	                SEP #$20        ; set A short
.010419	a9 80		lda #$80	                LDA #`SCREEN_PAGE0
.01041b	85 0e		sta $0e		                STA SCREENBEGIN+2
.01041d	c2 30		rep #$30	                REP #$30        ; set A&X long
.01041f	a9 00 00	lda #$0000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.010422	85 17		sta $17		                STA CURSORPOS
.010424	e2 20		sep #$20	                SEP #$20        ; set A short
.010426	a9 80		lda #$80	                LDA #`SCREEN_PAGE0
.010428	85 19		sta $19		                STA CURSORPOS+2
.01042a	c2 30		rep #$30	                REP #$30        ; set A&X long
.01042c	a2 50 00	ldx #$0050	                LDX #80
.01042f	86 0f		stx $0f		                STX COLS_VISIBLE
.010431	a0 3c 00	ldy #$003c	                LDY #60
.010434	84 13		sty $13		                STY LINES_VISIBLE
.010436	a2 80 00	ldx #$0080	                LDX #128
.010439	86 11		stx $11		                STX COLS_PER_LINE
.01043b	a0 40 00	ldy #$0040	                LDY #64
.01043e	84 15		sty $15		                STY LINES_MAX
.010440	c2 20		rep #$20	                REP #$20        ; set A long
.010442	a2 00 00	ldx #$0000	                LDX #$0
.010445	a0 00 00	ldy #$0000	                LDY #$0
.010448	22 ab 05 01	jsl $0105ab	                JSL ILOCATE
.01044c	9c 40 0f	stz $0f40	                STZ KEY_BUFFER_RPOS
.01044f	9c 42 0f	stz $0f42	                STZ KEY_BUFFER_WPOS
.010452					greet
.010452	48		pha		                PHA             ; begin setdbr macro
.010453	08		php		                PHP
.010454	e2 20		sep #$20	                SEP #$20        ; set A short
.010456	a9 01		lda #$01		LDA #`greet_msg
.010458	48		pha		                PHA
.010459	ab		plb		                PLB
.01045a	28		plp		                PLP
.01045b	68		pla		                PLA             ; end setdbr macro
.01045c	a2 0d 06	ldx #$060d	                LDX #<>greet_msg
.01045f	22 0f 05 01	jsl $01050f	                JSL IPRINT       ; print the first line
.010463	e2 20		sep #$20	                SEP #$20        ; set A short
.010465	48		pha		                PHA             ; begin setdbr macro
.010466	08		php		                PHP
.010467	e2 20		sep #$20	                SEP #$20        ; set A short
.010469	a9 01		lda #$01		LDA #$01
.01046b	48		pha		                PHA
.01046c	ab		plb		                PLB
.01046d	28		plp		                PLP
.01046e	68		pla		                PLA             ; end setdbr macro
.01046f	00		brk #		greet_done      BRK             ;Terminate boot routine and go to Ready handler.
.010470					IBREAK
.010470	48		pha		                PHA             ; begin setdp macro
.010471	08		php			PHP
.010472	c2 20		rep #$20	                REP #$20        ; set A long
.010474	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.010477	5b		tcd		                TCD
.010478	28		plp			PLP
.010479	68		pla		                PLA             ; end setdp macro
.01047a	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.01047b	8f 09 02 00	sta $000209	                STA CPUY
.01047f	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.010480	8f 07 02 00	sta $000207	                STA CPUX
.010484	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.010485	8f 05 02 00	sta $000205	                STA CPUA
.010489	68		pla		                PLA
.01048a	8f 0b 02 00	sta $00020b	                STA CPUDP       ; Pull Direct page
.01048e	e2 20		sep #$20	                SEP #$20        ; set A short
.010490	68		pla		                PLA             ; Pull Data Bank (8 bits)
.010491	8f 03 02 00	sta $000203	                STA CPUDBR
.010495	68		pla		                PLA             ; Pull Flags (8 bits)
.010496	8f 04 02 00	sta $000204	                STA CPUFLAGS
.01049a	c2 20		rep #$20	                REP #$20        ; set A long
.01049c	68		pla		                PLA             ; Pull Program Counter (16 bits)
.01049d	8f 00 02 00	sta $000200	                STA CPUPC
.0104a1	e2 20		sep #$20	                SEP #$20        ; set A short
.0104a3	68		pla		                PLA             ; Pull Program Bank (8 bits)
.0104a4	8f 02 02 00	sta $000202	                STA CPUPBR
.0104a8	c2 20		rep #$20	                REP #$20        ; set A long
.0104aa	3b		tsc		                TSA             ; Get the stack
.0104ab	8f 0d 02 00	sta $00020d	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.0104af	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.0104b2	1b		tcs		                TAS
.0104b3					IREADY
.0104b3	48		pha		                PHA             ; begin setdbr macro
.0104b4	08		php		                PHP
.0104b5	e2 20		sep #$20	                SEP #$20        ; set A short
.0104b7	a9 01		lda #$01		LDA #`ready_msg
.0104b9	48		pha		                PHA
.0104ba	ab		plb		                PLB
.0104bb	28		plp		                PLP
.0104bc	68		pla		                PLA             ; end setdbr macro
.0104bd	e2 20		sep #$20	                SEP #$20        ; set A short
.0104bf	a2 af 06	ldx #$06af	                LDX #<>ready_msg
.0104c2	22 0f 05 01	jsl $01050f	                JSL IPRINT
.0104c6					IREADYWAIT
.0104c6	22 d5 04 01	jsl $0104d5	                JSL IGETCHE
.0104ca	b0 fa		bcs $0104c6	                BCS IREADYWAIT
.0104cc	22 2f 05 01	jsl $01052f	                JSL IPUTC
.0104d0	4c c6 04	jmp $0104c6	                JMP IREADYWAIT
.0104d3	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.0104d4	db		stp		IRETURN         STP
.0104d5	22 de 04 01	jsl $0104de	IGETCHE         JSL IGETCHW
.0104d9	22 2f 05 01	jsl $01052f	                JSL IPUTC
.0104dd	6b		rtl		                RTL
.0104de	0b		phd		IGETCHW         PHD
.0104df	da		phx		                PHX
.0104e0	08		php		                PHP
.0104e1	48		pha		                PHA             ; begin setdp macro
.0104e2	08		php			PHP
.0104e3	c2 20		rep #$20	                REP #$20        ; set A long
.0104e5	a9 00 0f	lda #$0f00	                LDA #$0F00         ; set DP to page 0
.0104e8	5b		tcd		                TCD
.0104e9	28		plp			PLP
.0104ea	68		pla		                PLA             ; end setdp macro
.0104eb	c2 30		rep #$30	                REP #$30        ; set A&X long
.0104ed	a6 40		ldx $0f40	igetchw1        LDX KEY_BUFFER_RPOS
.0104ef	e4 42		cpx $0f42	                CPX KEY_BUFFER_WPOS
.0104f1	d0 05		bne $0104f8	                BNE igetchw2
>0104f3	42 00				                .byte $42, $00
.0104f5	4c ed 04	jmp $0104ed	                JMP igetchw1
.0104f8	b5 00		lda $0f00,x	igetchw2        LDA $0,D,X  ; Read the value in the keyboard buffer
.0104fa	48		pha		                PHA
.0104fb	8a		txa		                TXA
.0104fc	18		clc		                CLC
.0104fd	69 02 00	adc #$0002	                ADC #$02
.010500	c9 40 00	cmp #$0040	                CMP #KEY_BUFFER_SIZE
.010503	90 03		bcc $010508	                BCC igetchw3
.010505	a9 00 00	lda #$0000	                LDA #$0
.010508	85 40		sta $0f40	igetchw3        STA KEY_BUFFER_RPOS
.01050a	68		pla		                PLA
.01050b	28		plp		igetchw_done    PLP
.01050c	fa		plx		                PLX             ; Restore the saved registers and return
.01050d	2b		pld		                PLD
.01050e	6b		rtl		                RTL
.01050f	22 18 05 01	jsl $010518	IPRINT          JSL IPUTS
.010513	22 5d 05 01	jsl $01055d	                JSL IPRINTCR
.010517	6b		rtl		                RTL
.010518	48		pha		IPUTS           PHA
.010519	08		php		                PHP
.01051a	e2 20		sep #$20	                SEP #$20        ; set A short
.01051c	c2 10		rep #$10	                REP #$10        ; set X long
.01051e	bd 00 00	lda $010000,x	iputs1          LDA $0,b,x      ; read from the string
.010521	f0 08		beq $01052b	                BEQ iputs_done
.010523	22 2f 05 01	jsl $01052f	iputs2          JSL IPUTC
.010527	e8		inx		iputs3          INX
.010528	4c 1e 05	jmp $01051e	                JMP iputs1
.01052b	e8		inx		iputs_done      INX
.01052c	28		plp		                PLP
.01052d	68		pla		                PLA
.01052e	6b		rtl		                RTL
.01052f	0b		phd		IPUTC           PHD
.010530	08		php		                PHP             ; stash the flags (we'll be changing M)
.010531	48		pha		                PHA             ; begin setdp macro
.010532	08		php			PHP
.010533	c2 20		rep #$20	                REP #$20        ; set A long
.010535	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.010538	5b		tcd		                TCD
.010539	28		plp			PLP
.01053a	68		pla		                PLA             ; end setdp macro
.01053b	e2 20		sep #$20	                SEP #$20        ; set A short
.01053d	c9 0d		cmp #$0d	                CMP #$0D        ; handle CR
.01053f	d0 06		bne $010547	                BNE iputc_bs
.010541	22 5d 05 01	jsl $01055d	                JSL IPRINTCR
.010545	80 10		bra $010557	                bra iputc_done
.010547	c9 08		cmp #$08	iputc_bs        CMP #$08        ; backspace
.010549	d0 06		bne $010551	                BNE iputc_print
.01054b	22 6e 05 01	jsl $01056e	                JSL IPRINTBS
.01054f	80 06		bra $010557	                BRA iputc_done
.010551	87 17		sta [$17]	iputc_print     STA [CURSORPOS] ; Save the character on the screen
.010553	22 7e 05 01	jsl $01057e	                JSL ICSRRIGHT
.010557					iputc_done
>010557	42 01				                .byte $42, $01
.010559	28		plp		                PLP
.01055a	2b		pld		                PLD
.01055b	6b		rtl		                RTL
.01055c					IPUTB
.01055c	6b		rtl		                RTL
.01055d	da		phx		IPRINTCR	PHX
.01055e	5a		phy		                PHY
.01055f	08		php		                PHP
.010560	a2 00 00	ldx #$0000	                LDX #0
.010563	a4 1c		ldy $1c		                LDY CURSORY
.010565	c8		iny		                INY
.010566	22 ab 05 01	jsl $0105ab	                JSL ILOCATE
.01056a	28		plp		                PLP
.01056b	7a		ply		                PLY
.01056c	fa		plx		                PLX
.01056d	6b		rtl		                RTL
.01056e	da		phx		IPRINTBS	PHX
.01056f	5a		phy		                PHY
.010570	08		php		                PHP
.010571	a6 1a		ldx $1a		                LDX CURSORX
.010573	a4 1c		ldy $1c		                LDY CURSORY
.010575	ca		dex		                DEX
.010576	22 ab 05 01	jsl $0105ab	                JSL ILOCATE
.01057a	28		plp		                PLP
.01057b	7a		ply		                PLY
.01057c	fa		plx		                PLX
.01057d	6b		rtl		                RTL
.01057e					ICSRRIGHT
.01057e	da		phx		                PHX
.01057f	8b		phb		                PHB
.010580	c2 20		rep #$20	                REP #$20        ; set A long
.010582	c2 10		rep #$10	                REP #$10        ; set X long
.010584	48		pha		                PHA             ; begin setdp macro
.010585	08		php			PHP
.010586	c2 20		rep #$20	                REP #$20        ; set A long
.010588	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.01058b	5b		tcd		                TCD
.01058c	28		plp			PLP
.01058d	68		pla		                PLA             ; end setdp macro
.01058e	e6 17		inc $17		                INC CURSORPOS
.010590	a6 1a		ldx $1a		                LDX CURSORX
.010592	e8		inx		                INX
.010593	e4 0f		cpx $0f		                CPX COLS_VISIBLE
.010595	90 0c		bcc $0105a3	                BCC icsr_nowrap  ; wrap if the cursor is at or past column 80
.010597	a2 00 00	ldx #$0000	                LDX #0
.01059a	5a		phy		                PHY
.01059b	a4 1c		ldy $1c		                LDY CURSORY
.01059d	c8		iny		                INY
.01059e	22 ab 05 01	jsl $0105ab	                JSL ILOCATE
.0105a2	7a		ply		                PLY
.0105a3	86 1a		stx $1a		icsr_nowrap     STX CURSORX
.0105a5	ab		plb		                PLB
.0105a6	fa		plx		                PLX
.0105a7	6b		rtl		                RTL
.0105a8	6b		rtl		ISRLEFT	RTL
.0105a9	6b		rtl		ICSRUP	RTL
.0105aa	6b		rtl		ICSRDOWN	RTL
.0105ab	48		pha		ILOCATE         PHA
.0105ac	08		php		                PHP
.0105ad	c2 30		rep #$30	                REP #$30        ; set A&X long
.0105af					ilocate_scroll
.0105af	c4 13		cpy $13		                CPY LINES_VISIBLE
.0105b1	90 07		bcc $0105ba	                BCC ilocate_scrolldone
.0105b3	22 d7 05 01	jsl $0105d7	                JSL ISCROLLUP
.0105b7	88		dey		                DEY
.0105b8	80 f5		bra $0105af	                BRA ilocate_scroll
.0105ba					ilocate_scrolldone
.0105ba	86 1a		stx $1a		                STX CURSORX
.0105bc	84 1c		sty $1c		                STY CURSORY
.0105be	a5 0c		lda $0c		                LDA SCREENBEGIN
.0105c0					ilocate_row
.0105c0	c0 00 00	cpy #$0000	                CPY #$0
.0105c3	f0 08		beq $0105cd	                BEQ ilocate_right
.0105c5	18		clc		ilocate_down    CLC
.0105c6	65 11		adc $11		                ADC COLS_PER_LINE
.0105c8	88		dey		                DEY
.0105c9	f0 02		beq $0105cd	                BEQ ilocate_right
.0105cb	80 f8		bra $0105c5	                BRA ilocate_down
.0105cd	18		clc		ilocate_right   CLC
.0105ce	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.0105d0	85 17		sta $17		                STA CURSORPOS
.0105d2	a4 1c		ldy $1c		                LDY CURSORY
.0105d4	28		plp		ilocate_done    PLP
.0105d5	68		pla		                PLA
.0105d6	6b		rtl		                RTL
.0105d7					ISCROLLUP
.0105d7	48		pha		                PHA
.0105d8	da		phx		                PHX
.0105d9	5a		phy		                PHY
.0105da	8b		phb		                PHB
.0105db	08		php		                PHP
.0105dc	c2 30		rep #$30	                REP #$30        ; set A&X long
.0105de	18		clc		                CLC
.0105df	a5 0c		lda $0c		                LDA SCREENBEGIN
.0105e1	a8		tay		                TAY             ; Destination is first row
.0105e2	65 11		adc $11		                ADC COLS_PER_LINE
.0105e4	aa		tax		                TAX             ; Source is second row
.0105e5	a9 ef 1f	lda #$1fef	                LDA #SCREEN_PAGE1-SCREEN_PAGE0-COLS_PER_LINE
.0105e8	44 00 00	mvp $00,$00	                MVP $00,$00
.0105eb	28		plp		                PLP
.0105ec	ab		plb		                PLB
.0105ed	7a		ply		                PLY
.0105ee	fa		plx		                PLX
.0105ef	68		pla		                PLA
.0105f0	6b		rtl		                RTL
.0105f1	00		brk #		IRESTORE        BRK ; Warm boot routine
.0105f2	00		brk #		ISCINIT         BRK ;
.0105f3	00		brk #		IIOINIT         BRK ;
.0105f4	00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.0105f5	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.0105f6	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.0105f7	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.0105f8	00		brk #		ICLOSE          BRK ; Close a channel
.0105f9	00		brk #		ISETIN          BRK ; Set the current input channel
.0105fa	00		brk #		ISETOUT         BRK ; Set the current output channel
.0105fb	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.0105fc	00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.0105fd	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.0105fe	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.0105ff	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.010600	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.010601	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.010602	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.010603	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.010604	00		brk #		IPRINTF         BRK ; Print a float value
.010605	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.010606	00		brk #		IPRINTH         BRK ; Print Hex value in DP variable
.010607	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.010608	00		brk #		IPRINTAH        BRK ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
.010609	00		brk #		IPUSHKEY        BRK ;
.01060a	00		brk #		IPUSHKEYS       BRK ;
.01060b	00		brk #		ICSRLEFT        BRK ;
.01060c	00		brk #		ICSRHOME        BRK ;
.01060d					KERNEL_DATA
>01060d	20 20 20 20 ec a9 ec a9		greet_msg       .text "    ", $EC,$A9,$EC,$A9,$EC,$A9,$EC,$A9,$EC,$A9,     " FOENIX 256 DEVELOPMENT SYSTEM",$0D
>010615	ec a9 ec a9 ec a9 20 46 4f 45 4e 49 58 20 32 35
>010625	36 20 44 45 56 45 4c 4f 50 4d 45 4e 54 20 53 59
>010635	53 54 45 4d 0d
>01063a	20 20 20 ec a9 ec a9 ec		                .text "   " , $EC,$A9,$EC,$A9,$EC,$A9,$EC,$A9,$EC,$A9,    "  OPEN SOURCE COMPUTER",$0D
>010642	a9 ec a9 ec a9 20 20 4f 50 45 4e 20 53 4f 55 52
>010652	43 45 20 43 4f 4d 50 55 54 45 52 0d
>01065e	20 20 ec a9 ec a9 ec a9		                .text "  ", $EC,$A9,$EC,$A9,$EC,$A9,$EC,$A9,$EC,$A9,     "   ",$0D
>010666	ec a9 ec a9 20 20 20 0d
>01066e	20 ec a9 ec a9 ec a9 ec		                .text " ",  $EC,$A9,$EC,$A9,$EC,$A9,$EC,$A9,$EC,$A9,    "    1024KB BASIC RAM  8192K MEDIA RAM",$0D
>010676	a9 ec a9 20 20 20 20 31 30 32 34 4b 42 20 42 41
>010686	53 49 43 20 52 41 4d 20 20 38 31 39 32 4b 20 4d
>010696	45 44 49 41 20 52 41 4d 0d
>01069f	ec a9 ec a9 ec a9 ec a9		                .text $EC,$A9,$EC,$A9,$EC,$A9,$EC,$A9,$EC,$A9,         "     ",$00
>0106a7	ec a9 20 20 20 20 20 00
>0106af	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>0106b7	31 30 20 50 52 49 4e 54		hello_basic     .null "10 PRINT ""Hello World""",$0D
>0106bf	20 22 48 65 6c 6c 6f 20 57 6f 72 6c 64 22 0d 00
>0106cf	52 55 4e 0d 00			                .null "RUN",$0D
>0106d4	48 65 6c 6c 6f 20 57 6f		                .null "Hello World",$0D
>0106dc	72 6c 64 0d 00
>0106e1	0d 52 45 41 44 59 2e 00		                .null $0D,"READY."
>0106e9	47 20 30 32 30 30 30 30		hello_ml        .null "G 020000",$0D
>0106f1	0d 00
>0106f3	48 45 4c 4c 4f 20 57 4f		                .null "HELLO WORLD",$0D
>0106fb	52 4c 44 0d 00
>010700	0d 00				                .null $0D
>010702	20 50 43 20 20 20 20 20		                .null " PC     A    X    Y    SP   DBR DP   NVMXDIZC",$0D
>01070a	41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>01071a	50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>01072a	58 44 49 5a 43 0d 00
>010731	3b 30 30 32 31 31 32 20		                .null ";002112 0019 F0AA 0000 D6FF F8  0000 --M-----"
>010739	30 30 31 39 20 46 30 41 41 20 30 30 30 30 20 44
>010749	36 46 46 20 46 38 20 20 30 30 30 30 20 2d 2d 4d
>010759	2d 2d 2d 2d 2d 00
>01075f	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>010767	52 4f 52 00

;******  End of listing
