
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass --long-address --intel-hex -o kernel.hex --list kernel.lst kernel.asm
; Sat Sep 01 15:05:17 2018

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm


;******  Processing file: macros_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: directpage_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				DIRECT_PAGE      = $000000 ;Start of bank 0 and Direct page
=$000000				RESET            = $000000 ;4 Bytes Jumps to the beginning of kernel ROM. ($F8:0000).
=$000004				RETURN           = $000004 ;4 Bytes Called when the RETURN key is pressed in the immediate mode screen. This will process a command in MONITOR, execute a BASIC command, or add a BASIC program line.
=$000008				KEYDOWN          = $000008 ;4 Bytes Custom keyboard handler. This defaults to the kernel keypress handler, but you can redirect this to your own routines. Make sure to JML to the original address at the end of your custom routine. Use this to make F-Key macros or custom keyboard commands.
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;2 Bytes Color of next character to be printed to the screen.
=$000020				CURATTR          = $000020 ;2 Bytes Attribute of next character to be printed to the screen.
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$0000e0				TEMP             = $0000E0 ;16 Bytes Temp storage for kernel routines
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108				DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108				D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a				D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c				D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e				D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110				DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110				D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112				D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114				D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$0001f0				CPUPC            = $0001F0 ;2 Bytes Debug registers. When BRK is executed, Interrupt service routine will populate this block with the CPU registers.
=$0001f2				CPUPBR           = $0001F2 ;1 Byte  Program Bank Register (K)
=$0001f3				CPUDBR           = $0001F3 ;1 Byte  Data Bank Register (B)
=$0001f4				CPUA             = $0001F4 ;2 Bytes Accumulator (A)
=$0001f6				CPUX             = $0001F6 ;2 Bytes X Register
=$0001f8				CPUY             = $0001F8 ;2 Bytes Y Index Register
=$0001fa				CPUSTACK         = $0001FA ;2 Bytes Stack (S)
=$0001fc				CPUDP            = $0001FC ;2 Bytes Direct Page Register (D)
=$0001fe				CPUFLAGS         = $0001FE ;1 Byte  Flags (P)
=$000200				MCMDADDR         = $000200 ;3 Bytes Address of the current line of text being processed by the MONITOR command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000203				MCMDLEN          = $000203 ;2 Bytes Length of string being read by the parser. This should be the screen width when in screen memory. Otherwise should be as long as the buffer used to hold the text to parse.
=$000205				MCMDPOS          = $000205 ;3 Bytes Next character being read by the command parser.
=$000208				MCMD             = $000208 ;3 Bytes Address of the command text. The first character is used to decide which function to execute
=$00020b				MARG1            = $00020B ;3 Bytes Address of the command arguments.
=$00020e				MARG2            = $00020E ;3 Bytes Address of the command arguments.
=$000211				MARG3            = $000211 ;3 Bytes Address of the command arguments.
=$000214				MARG4            = $000214 ;3 Bytes Address of the command arguments.
=$000217				MARG5            = $000217 ;3 Bytes Address of the command arguments.
=$00021a				MARG6            = $00021A ;3 Bytes Address of the command arguments.
=$00021d				MARG7            = $00021D ;3 Bytes Address of the command arguments.
=$000300				BCMDADDR         = $000300 ;3 Bytes Pointer to current BASIC line on screen
=$000303				BCMDLEN          = $000303 ;2 Bytes Length of the BASIC command
=$000305				BCMDPOS          = $000305 ;3 Bytes Next character being read in the BASIC command
=$00f00					KEY_BUFFER       = $00F00 ;64 Bytes SCREEN_PAGE1
=$40					KEY_BUFFER_LEN   = $40 ;64 Bytes SCREEN_PAGE2
=$000f3f				KEY_BUFFER_END   = $000F3F ;1 Byte  SCREEN_PAGE3
=$000f40				KEY_BUFFER_RPOS  = $000F40 ;2 Bytes keyboard buffer read position
=$000f42				KEY_BUFFER_WPOS  = $000F42 ;2 Bytes keyboard buffer write position
=$001000				SCREEN_PAGE0     = $001000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$003000				SCREEN_PAGE1     = $003000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$005000				SCREEN_PAGE2     = $005000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$007000				SCREEN_PAGE3     = $007000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$009000				SCREEN_END       = $009000 ;This space is avaialble for user code and variables, up to the beginning of the stack. Do not write past STACK_BEGIN
=$009800				STACK_BEGIN      = $009800 ;16384 Bytes The default beginning of stack space
=$00d7ff				STACK_END        = $00D7FF ;0 Byte  End of stack space. Everything below this is I/O space
=$00d800				IO_BEGIN         = $00D800 ; Byte  Beginning of IO space
=$00d800				IO_GAVIN         = $00D800 ;1024 Bytes GAVIN I/O space
=$00dc00				IO_SUPERIO       = $00DC00 ;1024 Bytes SuperIO I/O space
=$00e000				IO_VICKY         = $00E000 ;1024 Bytes VICKY I/O space
=$00e400				IO_BEATRIX       = $00E400 ;1024 Bytes BEATRIX I/O space
=$00e800				IO_RTC           = $00E800 ;1024 Bytes RTC I/O space
=$00ec00				IO_CIA           = $00EC00 ;4864 Bytes CIA I/O space
=$00ff00				IO_END           = $00FF00 ;*End of I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;80 Bytes Handle NMI asserted.
=$00ff90				HIRQ             = $00FF90 ;80 Bytes Handle IRQ. Should read IRQ line from GAVIN and jump to appropriate IRQ handler.
=$00ffe0				ISR_END          = $00FFE0 ;*End of vector space
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Native interrupt vector
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native interrupt vector
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000				VECTORS_END      = $010000 ;*End of vector space

;******  Return to file: kernel.asm


;******  Processing file: monitor_inc.asm

=$f10000				MONITOR     = $F10000
=$f10004				MBREAK      = $F10004
=$f10008				MSTATUS     = $F10008
=$f1000b				MREADY      = $F1000B
=$f10010				MRETURN	    = $F10010
=$f10014				MPARSE      = $F10014

;******  Return to file: kernel.asm


;******  Processing file: kernel_vectors.asm

.ffff00	5c 00 00 f8	jmp $f80000	                JML BOOT
.ffff10	5c 20 ff 00	jmp $00ff20	                JMP HBRK
.ffff20					RHBRK
.ffff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ffff22	8b		phb		                PHB
.ffff23	0b		phd		                PHD
.ffff24	48		pha		                PHA
.ffff25	da		phx		                PHX
.ffff26	5a		phy		                PHY
.ffff27	5c 08 00 f8	jmp $f80008	                JML BREAK
.ffff50					RHIRQ
.ffff50	c2 30		rep #$30	                REP #$30        ; set A&X long
.ffff52	8b		phb		                PHB
.ffff53	0b		phd		                PHD
.ffff54	48		pha		                PHA
.ffff55	da		phx		                PHX
.ffff56	5a		phy		                PHY
.ffff57	7a		ply		                PLY
.ffff58	fa		plx		                PLX
.ffff59	68		pla		                PLA
.ffff5a	2b		pld		                PLD
.ffff5b	ab		plb		                PLB
.ffff5c	40		rti		                RTI
.ffffe0					ROM_VECTORS
.ffffe0	5c 0c 00 f8	jmp $f8000c	JUMP_READY      JML READY
>ffffe4	10 ff				RVECTOR_COP     .word $FF10     ; FFE4
>ffffe6	20 ff				RVECTOR_BRK     .word $FF20     ; FFE6
>ffffe8	30 ff				RVECTOR_ABORT   .word $FF30     ; FFE8
>ffffea	40 ff				RVECTOR_NMI     .word $FF40     ; FFEA
>ffffec	00 00				                .word $0000     ; FFEC
>ffffee	50 ff				RVECTOR_IRQ     .word $FF50     ; FFEE
>fffff0	00 00				                .word $0000     ; FFF0
>fffff2	00 00				                .word $0000     ; FFF2
>fffff4	10 ff				RVECTOR_ECOP    .word $FF10     ; FFF4
>fffff6	20 ff				RVECTOR_EBRK    .word $FF20     ; FFF6
>fffff8	30 ff				RVECTOR_EABORT  .word $FF30     ; FFF8
>fffffa	40 ff				RVECTOR_ENMI    .word $FF40     ; FFFA
>fffffc	00 ff				RVECTOR_ERESET  .word $FF00     ; FFFC
>fffffe	50 ff				RVECTOR_EIRQ    .word $FF50     ; FFFE

;******  Return to file: kernel.asm


;******  Processing file: simulator_inc.asm


;******  Return to file: kernel.asm

.f80000	5c 03 10 f8	jmp $f81003	BOOT            JML IBOOT
.f80004	5c dc 11 f8	jmp $f811dc	RESTORE         JML IRESTORE
.f80008	5c 7d 10 f8	jmp $f8107d	BREAK           JML IBREAK
.f8000c	5c c0 10 f8	jmp $f810c0	READY           JML IREADY
.f80010	5c dd 11 f8	jmp $f811dd	SCINIT          JML ISCINIT
.f80014	5c de 11 f8	jmp $f811de	IOINIT          JML IIOINIT
.f80018	5c 3c 11 f8	jmp $f8113c	PUTC            JML IPUTC
.f8001c	5c 25 11 f8	jmp $f81125	PUTS            JML IPUTS
.f80020	5c 69 11 f8	jmp $f81169	PUTB            JML IPUTB
.f80024	5c df 11 f8	jmp $f811df	PUTBLOCK        JML IPUTBLOCK
.f80028	5c e0 11 f8	jmp $f811e0	SETLFS          JML ISETLFS
.f8002c	5c e1 11 f8	jmp $f811e1	SETNAM          JML ISETNAM
.f80030	5c e2 11 f8	jmp $f811e2	OPEN            JML IOPEN
.f80034	5c e3 11 f8	jmp $f811e3	CLOSE           JML ICLOSE
.f80038	5c e4 11 f8	jmp $f811e4	SETIN           JML ISETIN
.f8003c	5c e5 11 f8	jmp $f811e5	SETOUT          JML ISETOUT
.f80040	5c e6 11 f8	jmp $f811e6	GETB            JML IGETB
.f80044	5c e7 11 f8	jmp $f811e7	GETBLOCK        JML IGETBLOCK
.f80048	5c e8 11 f8	jmp $f811e8	GETCH           JML IGETCH
.f8004c	5c eb 10 f8	jmp $f810eb	GETCHW          JML IGETCHW
.f80050	5c e2 10 f8	jmp $f810e2	GETCHE          JML IGETCHE
.f80054	5c e9 11 f8	jmp $f811e9	GETS            JML IGETS
.f80058	5c ea 11 f8	jmp $f811ea	GETLINE         JML IGETLINE
.f8005c	5c eb 11 f8	jmp $f811eb	GETFIELD        JML IGETFIELD
.f80060	5c ec 11 f8	jmp $f811ec	TRIM            JML ITRIM
.f80064	5c ed 11 f8	jmp $f811ed	PRINTC          JML IPRINTC
.f80068	5c ee 11 f8	jmp $f811ee	PRINTS          JML IPRINTS
.f8006c	5c 6a 11 f8	jmp $f8116a	PRINTCR         JML IPRINTCR
.f80070	5c ef 11 f8	jmp $f811ef	PRINTF          JML IPRINTF
.f80074	5c f0 11 f8	jmp $f811f0	PRINTI          JML IPRINTI
.f80078	5c f1 11 f8	jmp $f811f1	PRINTH          JML IPRINTH
.f8007c	5c f2 11 f8	jmp $f811f2	PRINTAI         JML IPRINTAI
.f80080	5c f3 11 f8	jmp $f811f3	PRINTAH         JML IPRINTAH
.f80084	5c b8 11 f8	jmp $f811b8	LOCATE          JML ILOCATE
.f80088	5c f4 11 f8	jmp $f811f4	PUSHKEY         JML IPUSHKEY
.f8008c	5c f5 11 f8	jmp $f811f5	PUSHKEYS        JML IPUSHKEYS
.f80090	5c 8b 11 f8	jmp $f8118b	CSRRIGHT        JML ICSRRIGHT
.f80094	5c f6 11 f8	jmp $f811f6	CSRLEFT         JML ICSRLEFT
.f80098	5c b6 11 f8	jmp $f811b6	CSRUP           JML ICSRUP
.f8009c	5c b7 11 f8	jmp $f811b7	CSRDOWN         JML ICSRDOWN
.f800a0	5c f7 11 f8	jmp $f811f7	CSRHOME         JML ICSRHOME
.f81000	4c 03 10	jmp $f81003	IRESET          JMP IBOOT
.f81003					IBOOT
.f81003	18		clc		                CLC           ; clear the carry flag
.f81004	fb		xce		                XCE           ; move carry to emulation flag.
.f81005	c2 30		rep #$30	                REP #$30        ; set long A and X
.f81007	a9 ff d7	lda #$d7ff	                LDA #STACK_END   ; initialize stack pointer
.f8100a	1b		tcs		                TAS
.f8100b	48		pha		                PHA             ; begin setdp macro
.f8100c	08		php			PHP
.f8100d	c2 20		rep #$20	                REP #$20        ; set A long
.f8100f	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.f81012	5b		tcd		                TCD
.f81013	28		plp			PLP
.f81014	68		pla		                PLA             ; end setdp macro
.f81015	a9 00 10	lda #$1000	                LDA #$1000      ; store the initial screen buffer location
.f81018	85 0c		sta $0c		                STA SCREENBEGIN
.f8101a	e2 20		sep #$20	                SEP #$20        ; set A short
.f8101c	a9 00		lda #$00	                LDA #$00
.f8101e	85 0e		sta $0e		                STA SCREENBEGIN+2
.f81020	c2 20		rep #$20	                REP #$20        ; set A long
.f81022	a9 00 10	lda #$1000	                LDA #$1000      ; store the initial cursor position
.f81025	85 17		sta $17		                STA CURSORPOS
.f81027	e2 20		sep #$20	                SEP #$20        ; set A short
.f81029	a9 00		lda #$00	                LDA #$00
.f8102b	85 19		sta $19		                STA CURSORPOS+2
.f8102d	a2 00 00	ldx #$0000	                LDX #$0
.f81030	a0 00 00	ldy #$0000	                LDY #$0
.f81033	22 b8 11 f8	jsl $f811b8	                JSL ILOCATE
.f81037	e2 20		sep #$20	                SEP #$20        ; set A short
.f81039	a9 50		lda #$50	                LDA #80
.f8103b	85 0f		sta $0f		                STA COLS_VISIBLE
.f8103d	a9 80		lda #$80	                LDA #128
.f8103f	85 11		sta $11		                STA COLS_PER_LINE
.f81041	a9 19		lda #$19	                LDA #25
.f81043	85 13		sta $13		                STA LINES_VISIBLE
.f81045	a9 40		lda #$40	                LDA #64
.f81047	85 15		sta $15		                STA LINES_MAX
.f81049	c2 20		rep #$20	                REP #$20        ; set A long
.f8104b	9c 40 0f	stz $0f40	                STZ KEY_BUFFER_RPOS
.f8104e	9c 42 0f	stz $0f42	                STZ KEY_BUFFER_WPOS
.f81051	c2 30		rep #$30	                REP #$30        ; set A&X long
.f81053	a9 ff 00	lda #$00ff	                LDA #$FF
.f81056	a2 00 ff	ldx #$ff00	                LDX #$FF00
.f81059	a0 00 ff	ldy #$ff00	                LDY #$FF00
.f8105c	44 ff 00	mvp $00,$ff	                MVP $00, $FF
.f8105f					greet
.f8105f	48		pha		                PHA             ; begin setdbr macro
.f81060	08		php		                PHP
.f81061	e2 20		sep #$20	                SEP #$20        ; set A short
.f81063	a9 f8		lda #$f8		LDA #`greet_msg
.f81065	48		pha		                PHA
.f81066	ab		plb		                PLB
.f81067	28		plp		                PLP
.f81068	68		pla		                PLA             ; end setdbr macro
.f81069	a2 00 f0	ldx #$f000	                LDX #<>greet_msg
.f8106c	22 1c 11 f8	jsl $f8111c	                JSL IPRINT       ; print the first line
.f81070	e2 20		sep #$20	                SEP #$20        ; set A short
.f81072	48		pha		                PHA             ; begin setdbr macro
.f81073	08		php		                PHP
.f81074	e2 20		sep #$20	                SEP #$20        ; set A short
.f81076	a9 01		lda #$01		LDA #$01
.f81078	48		pha		                PHA
.f81079	ab		plb		                PLB
.f8107a	28		plp		                PLP
.f8107b	68		pla		                PLA             ; end setdbr macro
.f8107c	00		brk #		greet_done      BRK             ;Terminate boot routine and go to Ready handler.
.f8107d					IBREAK
.f8107d	48		pha		                PHA             ; begin setdp macro
.f8107e	08		php			PHP
.f8107f	c2 20		rep #$20	                REP #$20        ; set A long
.f81081	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.f81084	5b		tcd		                TCD
.f81085	28		plp			PLP
.f81086	68		pla		                PLA             ; end setdp macro
.f81087	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.f81088	8f f8 01 00	sta $0001f8	                STA CPUY
.f8108c	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.f8108d	8f f6 01 00	sta $0001f6	                STA CPUX
.f81091	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.f81092	8f f4 01 00	sta $0001f4	                STA CPUA
.f81096	68		pla		                PLA
.f81097	8f fc 01 00	sta $0001fc	                STA CPUDP       ; Pull Direct page
.f8109b	e2 20		sep #$20	                SEP #$20        ; set A short
.f8109d	68		pla		                PLA             ; Pull Data Bank (8 bits)
.f8109e	8f f3 01 00	sta $0001f3	                STA CPUDBR
.f810a2	68		pla		                PLA             ; Pull Flags (8 bits)
.f810a3	8f fe 01 00	sta $0001fe	                STA CPUFLAGS
.f810a7	c2 20		rep #$20	                REP #$20        ; set A long
.f810a9	68		pla		                PLA             ; Pull Program Counter (16 bits)
.f810aa	8f f0 01 00	sta $0001f0	                STA CPUPC
.f810ae	e2 20		sep #$20	                SEP #$20        ; set A short
.f810b0	68		pla		                PLA             ; Pull Program Bank (8 bits)
.f810b1	8f f2 01 00	sta $0001f2	                STA CPUPBR
.f810b5	c2 20		rep #$20	                REP #$20        ; set A long
.f810b7	3b		tsc		                TSA             ; Get the stack
.f810b8	8f fa 01 00	sta $0001fa	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.f810bc	a9 ff d7	lda #$d7ff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.f810bf	1b		tcs		                TAS
.f810c0					IREADY
.f810c0	48		pha		                PHA             ; begin setdbr macro
.f810c1	08		php		                PHP
.f810c2	e2 20		sep #$20	                SEP #$20        ; set A short
.f810c4	a9 f8		lda #$f8		LDA #`ready_msg
.f810c6	48		pha		                PHA
.f810c7	ab		plb		                PLB
.f810c8	28		plp		                PLP
.f810c9	68		pla		                PLA             ; end setdbr macro
.f810ca	e2 20		sep #$20	                SEP #$20        ; set A short
.f810cc	a2 65 f0	ldx #$f065	                LDX #<>ready_msg
.f810cf	22 1c 11 f8	jsl $f8111c	                JSL IPRINT
.f810d3					IREADYWAIT
.f810d3	22 e2 10 f8	jsl $f810e2	                JSL IGETCHE
.f810d7	b0 fa		bcs $f810d3	                BCS IREADYWAIT
.f810d9	22 3c 11 f8	jsl $f8113c	                JSL IPUTC
.f810dd	4c d3 10	jmp $f810d3	                JMP IREADYWAIT
.f810e0	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.f810e1	db		stp		IRETURN         STP
.f810e2	22 eb 10 f8	jsl $f810eb	IGETCHE         JSL IGETCHW
.f810e6	22 3c 11 f8	jsl $f8113c	                JSL IPUTC
.f810ea	6b		rtl		                RTL
.f810eb	0b		phd		IGETCHW         PHD
.f810ec	da		phx		                PHX
.f810ed	08		php		                PHP
.f810ee	48		pha		                PHA             ; begin setdp macro
.f810ef	08		php			PHP
.f810f0	c2 20		rep #$20	                REP #$20        ; set A long
.f810f2	a9 00 0f	lda #$0f00	                LDA #$0F00         ; set DP to page 0
.f810f5	5b		tcd		                TCD
.f810f6	28		plp			PLP
.f810f7	68		pla		                PLA             ; end setdp macro
.f810f8	c2 30		rep #$30	                REP #$30        ; set A&X long
.f810fa	a6 40		ldx $0f40	igetchw1        LDX KEY_BUFFER_RPOS
.f810fc	e4 42		cpx $0f42	                CPX KEY_BUFFER_WPOS
.f810fe	d0 05		bne $f81105	                BNE igetchw2
>f81100	42 00				                .byte $42, $00
.f81102	4c fa 10	jmp $f810fa	                JMP igetchw1
.f81105	b5 00		lda $0f00,x	igetchw2        LDA $0,D,X  ; Read the value in the keyboard buffer
.f81107	48		pha		                PHA
.f81108	8a		txa		                TXA
.f81109	18		clc		                CLC
.f8110a	69 02 00	adc #$0002	                ADC #$02
.f8110d	c9 40 00	cmp #$0040	                CMP #KEY_BUFFER_LEN
.f81110	90 03		bcc $f81115	                BCC igetchw3
.f81112	a9 00 00	lda #$0000	                LDA #$0
.f81115	85 40		sta $0f40	igetchw3        STA KEY_BUFFER_RPOS
.f81117	68		pla		                PLA
.f81118	28		plp		igetchw_done    PLP
.f81119	fa		plx		                PLX             ; Restore the saved registers and return
.f8111a	2b		pld		                PLD
.f8111b	6b		rtl		                RTL
.f8111c	22 25 11 f8	jsl $f81125	IPRINT          JSL IPUTS
.f81120	22 6a 11 f8	jsl $f8116a	                JSL IPRINTCR
.f81124	6b		rtl		                RTL
.f81125	48		pha		IPUTS           PHA
.f81126	08		php		                PHP
.f81127	e2 20		sep #$20	                SEP #$20        ; set A short
.f81129	c2 10		rep #$10	                REP #$10        ; set X long
.f8112b	bd 00 00	lda $f80000,x	iputs1          LDA $0,b,x      ; read from the string
.f8112e	f0 08		beq $f81138	                BEQ iputs_done
.f81130	22 3c 11 f8	jsl $f8113c	iputs2          JSL IPUTC
.f81134	e8		inx		iputs3          INX
.f81135	4c 2b 11	jmp $f8112b	                JMP iputs1
.f81138	e8		inx		iputs_done      INX
.f81139	28		plp		                PLP
.f8113a	68		pla		                PLA
.f8113b	6b		rtl		                RTL
.f8113c	0b		phd		IPUTC           PHD
.f8113d	08		php		                PHP             ; stash the flags (we'll be changing M)
.f8113e	48		pha		                PHA             ; begin setdp macro
.f8113f	08		php			PHP
.f81140	c2 20		rep #$20	                REP #$20        ; set A long
.f81142	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.f81145	5b		tcd		                TCD
.f81146	28		plp			PLP
.f81147	68		pla		                PLA             ; end setdp macro
.f81148	e2 20		sep #$20	                SEP #$20        ; set A short
.f8114a	c9 0d		cmp #$0d	                CMP #$0D        ; handle CR
.f8114c	d0 06		bne $f81154	                BNE iputc_bs
.f8114e	22 6a 11 f8	jsl $f8116a	                JSL IPRINTCR
.f81152	80 10		bra $f81164	                bra iputc_done
.f81154	c9 08		cmp #$08	iputc_bs        CMP #$08        ; backspace
.f81156	d0 06		bne $f8115e	                BNE iputc_print
.f81158	22 7b 11 f8	jsl $f8117b	                JSL IPRINTBS
.f8115c	80 06		bra $f81164	                BRA iputc_done
.f8115e	87 17		sta [$17]	iputc_print     STA [CURSORPOS] ; Save the character on the screen
.f81160	22 8b 11 f8	jsl $f8118b	                JSL ICSRRIGHT
.f81164					iputc_done
>f81164	42 01				                .byte $42, $01
.f81166	28		plp		                PLP
.f81167	2b		pld		                PLD
.f81168	6b		rtl		                RTL
.f81169					IPUTB
.f81169	6b		rtl		                RTL
.f8116a	da		phx		IPRINTCR	PHX
.f8116b	5a		phy		                PHY
.f8116c	08		php		                PHP
.f8116d	a2 00 00	ldx #$0000	                LDX #0
.f81170	a4 1c		ldy $1c		                LDY CURSORY
.f81172	c8		iny		                INY
.f81173	22 b8 11 f8	jsl $f811b8	                JSL ILOCATE
.f81177	28		plp		                PLP
.f81178	7a		ply		                PLY
.f81179	fa		plx		                PLX
.f8117a	6b		rtl		                RTL
.f8117b	da		phx		IPRINTBS	PHX
.f8117c	5a		phy		                PHY
.f8117d	08		php		                PHP
.f8117e	a6 1a		ldx $1a		                LDX CURSORX
.f81180	a4 1c		ldy $1c		                LDY CURSORY
.f81182	ca		dex		                DEX
.f81183	22 b8 11 f8	jsl $f811b8	                JSL ILOCATE
.f81187	28		plp		                PLP
.f81188	7a		ply		                PLY
.f81189	fa		plx		                PLX
.f8118a	6b		rtl		                RTL
.f8118b					ICSRRIGHT
.f8118b	da		phx		                PHX
.f8118c	8b		phb		                PHB
.f8118d	c2 20		rep #$20	                REP #$20        ; set A long
.f8118f	c2 10		rep #$10	                REP #$10        ; set X long
.f81191	48		pha		                PHA             ; begin setdp macro
.f81192	08		php			PHP
.f81193	c2 20		rep #$20	                REP #$20        ; set A long
.f81195	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.f81198	5b		tcd		                TCD
.f81199	28		plp			PLP
.f8119a	68		pla		                PLA             ; end setdp macro
.f8119b	e6 17		inc $17		                INC CURSORPOS
.f8119d	a6 1a		ldx $1a		                LDX CURSORX
.f8119f	e8		inx		                INX
.f811a0	e4 0f		cpx $0f		                CPX COLS_VISIBLE
.f811a2	90 0c		bcc $f811b0	                BCC icsr_nowrap  ; wrap if the cursor is at or past column 80
.f811a4	a2 00 00	ldx #$0000	                LDX #0
.f811a7	5a		phy		                PHY
.f811a8	a4 1c		ldy $1c		                LDY CURSORY
.f811aa	c8		iny		                INY
.f811ab	22 b8 11 f8	jsl $f811b8	                JSL ILOCATE
.f811af	7a		ply		                PLY
.f811b0	86 1a		stx $1a		icsr_nowrap     STX CURSORX
.f811b2	ab		plb		                PLB
.f811b3	fa		plx		                PLX
.f811b4	6b		rtl		                RTL
.f811b5	6b		rtl		ISRLEFT	RTL
.f811b6	6b		rtl		ICSRUP	RTL
.f811b7	6b		rtl		ICSRDOWN	RTL
.f811b8	48		pha		ILOCATE         PHA
.f811b9	08		php		                PHP
.f811ba	c2 20		rep #$20	                REP #$20        ; set A long
.f811bc	c2 10		rep #$10	                REP #$10        ; set X long
.f811be	86 1a		stx $1a		                STX CURSORX
.f811c0	84 1c		sty $1c		                STY CURSORY
.f811c2	c0 00 00	cpy #$0000	                CPY #$0
.f811c5	f0 0b		beq $f811d2	                BEQ ilocate_right
.f811c7	a5 0c		lda $0c		                LDA SCREENBEGIN
.f811c9	18		clc		ilocate_down    CLC
.f811ca	65 11		adc $11		                ADC COLS_PER_LINE
.f811cc	88		dey		                DEY
.f811cd	f0 03		beq $f811d2		BEQ ilocate_right
.f811cf	4c c9 11	jmp $f811c9	                JMP ilocate_down
.f811d2	18		clc		ilocate_right   CLC
.f811d3	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.f811d5	85 17		sta $17		                STA CURSORPOS
.f811d7	a4 1c		ldy $1c			LDY CURSORY
.f811d9	28		plp		ilocate_done    PLP
.f811da	68		pla		                PLA
.f811db	6b		rtl		                RTL
.f811dc	00		brk #		IRESTORE        BRK ; Warm boot routine
.f811dd	00		brk #		ISCINIT         BRK ;
.f811de	00		brk #		IIOINIT         BRK ;
.f811df	00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.f811e0	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.f811e1	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.f811e2	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.f811e3	00		brk #		ICLOSE          BRK ; Close a channel
.f811e4	00		brk #		ISETIN          BRK ; Set the current input channel
.f811e5	00		brk #		ISETOUT         BRK ; Set the current output channel
.f811e6	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.f811e7	00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.f811e8	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.f811e9	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.f811ea	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.f811eb	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.f811ec	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.f811ed	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.f811ee	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.f811ef	00		brk #		IPRINTF         BRK ; Print a float value
.f811f0	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.f811f1	00		brk #		IPRINTH         BRK ; Print Hex value in DP variable
.f811f2	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.f811f3	00		brk #		IPRINTAH        BRK ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
.f811f4	00		brk #		IPUSHKEY        BRK ;
.f811f5	00		brk #		IPUSHKEYS       BRK ;
.f811f6	00		brk #		ICSRLEFT        BRK ;
.f811f7	00		brk #		ICSRHOME        BRK ;
>f8f000	20 20 2f 2f 2f 2f 2f 20		greet_msg       .text "  ///// FOENIX 256 DEVELOPMENT SYSTEM",$0D
>f8f008	46 4f 45 4e 49 58 20 32 35 36 20 44 45 56 45 4c
>f8f018	4f 50 4d 45 4e 54 20 53 59 53 54 45 4d 0d
>f8f026	20 2f 2f 2f 2f 2f 20 20		greet_msg1      .text " /////  OPEN SOURCE COMPUTER",$0D
>f8f02e	4f 50 45 4e 20 53 4f 55 52 43 45 20 43 4f 4d 50
>f8f03e	55 54 45 52 0d
>f8f043	2f 2f 2f 2f 2f 20 20 20		greet_msg2      .text "/////   8192KB SYSTEM 8128KB FREE",$00
>f8f04b	38 31 39 32 4b 42 20 53 59 53 54 45 4d 20 38 31
>f8f05b	32 38 4b 42 20 46 52 45 45 00
>f8f065	0d 52 45 41 44 59 2e 00		ready_msg       .text $0D,"READY.",$00
>f8f06d	3b 46 38 31 30 30 30 20		                .text ";F81000 0000 0000 0000 D6FF F8  0000 ------Z-",$00
>f8f075	30 30 30 30 20 30 30 30 30 20 30 30 30 30 20 44
>f8f085	36 46 46 20 46 38 20 20 30 30 30 30 20 2d 2d 2d
>f8f095	2d 2d 2d 5a 2d 00
>f8f09b	31 30 20 50 52 49 4e 54		hello_basic     .text "10 PRINT ""Hello World""",$0D
>f8f0a3	20 22 48 65 6c 6c 6f 20 57 6f 72 6c 64 22 0d
>f8f0b2	52 55 4e 0d			                .text "RUN",$0D
>f8f0b6	48 65 6c 6c 6f 20 57 6f		                .text "Hello World",$0D
>f8f0be	72 6c 64 0d
>f8f0c2	0d 52 45 41 44 59 2e 00		                .text $0D,"READY.",$00
>f8f0ca	47 20 30 32 30 30 30 30		hello_ml        .text "G 020000",$0D
>f8f0d2	0d
>f8f0d3	48 45 4c 4c 4f 20 57 4f		                .text "HELLO WORLD",$0D
>f8f0db	52 4c 44 0d
>f8f0df	0d				                .text $0D
>f8f0e0	20 50 43 20 20 20 20 20		                .text " PC     A    X    Y    SP   DBR DP   NVMXDIZC",$0D
>f8f0e8	41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>f8f0f8	50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>f8f108	58 44 49 5a 43 0d
>f8f10e	3b 30 30 32 31 31 32 20		                .text ";002112 0019 F0AA 0000 D6FF F8  0000 --M-----",$00
>f8f116	30 30 31 39 20 46 30 41 41 20 30 30 30 30 20 44
>f8f126	36 46 46 20 46 38 20 20 30 30 30 30 20 2d 2d 4d
>f8f136	2d 2d 2d 2d 2d 00
>f8f13c	41 42 4f 52 54 20 45 52		error_01        .text "ABORT ERROR",$00
>f8f144	52 4f 52 00

;******  End of listing
