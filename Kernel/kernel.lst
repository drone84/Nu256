
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass --long-address --intel-hex -o kernel.hex --list kernel.lst kernel.asm
; Thu Sep 06 14:57:32 2018

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm


;******  Processing file: macros_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: directpage_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				DIRECT_PAGE      = $000000 ;Start of bank 0 and Direct page
=$000000				RESET            = $000000 ;4 Bytes Jumps to the beginning of kernel ROM. ($F8:0000).
=$000004				RETURN           = $000004 ;4 Bytes Called when the RETURN key is pressed in the immediate mode screen. This will process a command in MONITOR, execute a BASIC command, or add a BASIC program line.
=$000008				KEYDOWN          = $000008 ;4 Bytes Custom keyboard handler. This defaults to the kernel keypress handler, but you can redirect this to your own routines. Make sure to JML to the original address at the end of your custom routine. Use this to make F-Key macros or custom keyboard commands.
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=60
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;2 Bytes Color of next character to be printed to the screen.
=$000020				CURATTR          = $000020 ;2 Bytes Attribute of next character to be printed to the screen.
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$0000e0				TEMP             = $0000E0 ;16 Bytes Temp storage for kernel routines
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108				DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108				D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a				D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c				D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e				D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110				DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110				D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112				D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114				D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$0001f0				CPUPC            = $0001F0 ;2 Bytes Debug registers. When BRK is executed, Interrupt service routine will populate this block with the CPU registers.
=$0001f2				CPUPBR           = $0001F2 ;1 Byte  Program Bank Register (K)
=$0001f3				CPUDBR           = $0001F3 ;1 Byte  Data Bank Register (B)
=$0001f4				CPUA             = $0001F4 ;2 Bytes Accumulator (A)
=$0001f6				CPUX             = $0001F6 ;2 Bytes X Register
=$0001f8				CPUY             = $0001F8 ;2 Bytes Y Index Register
=$0001fa				CPUSTACK         = $0001FA ;2 Bytes Stack (S)
=$0001fc				CPUDP            = $0001FC ;2 Bytes Direct Page Register (D)
=$0001fe				CPUFLAGS         = $0001FE ;1 Byte  Flags (P)
=$000200				MCMDADDR         = $000200 ;3 Bytes Address of the current line of text being processed by the MONITOR command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000203				MCMDLEN          = $000203 ;2 Bytes Length of string being read by the parser. This should be the screen width when in screen memory. Otherwise should be as long as the buffer used to hold the text to parse.
=$000205				MCMDPOS          = $000205 ;3 Bytes Next character being read by the command parser.
=$000208				MCMD             = $000208 ;3 Bytes Address of the command text. The first character is used to decide which function to execute
=$00020b				MARG1            = $00020B ;3 Bytes Address of the command arguments.
=$00020e				MARG2            = $00020E ;3 Bytes Address of the command arguments.
=$000211				MARG3            = $000211 ;3 Bytes Address of the command arguments.
=$000214				MARG4            = $000214 ;3 Bytes Address of the command arguments.
=$000217				MARG5            = $000217 ;3 Bytes Address of the command arguments.
=$00021a				MARG6            = $00021A ;3 Bytes Address of the command arguments.
=$00021d				MARG7            = $00021D ;3 Bytes Address of the command arguments.
=$000300				BCMDADDR         = $000300 ;3 Bytes Pointer to current BASIC line on screen
=$000303				BCMDLEN          = $000303 ;2 Bytes Length of the BASIC command
=$000305				BCMDPOS          = $000305 ;3 Bytes Next character being read in the BASIC command
=$00f00					KEY_BUFFER       = $00F00 ;64 Bytes SCREEN_PAGE1
=$40					KEY_BUFFER_LEN   = $40 ;64 Bytes SCREEN_PAGE2
=$000f3f				KEY_BUFFER_END   = $000F3F ;1 Byte  SCREEN_PAGE3
=$000f40				KEY_BUFFER_RPOS  = $000F40 ;2 Bytes keyboard buffer read position
=$000f42				KEY_BUFFER_WPOS  = $000F42 ;2 Bytes keyboard buffer write position
=$001000				SCREEN_PAGE0     = $001000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$003000				SCREEN_PAGE1     = $003000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$005000				SCREEN_PAGE2     = $005000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$007000				SCREEN_PAGE3     = $007000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$009000				SCREEN_END       = $009000 ;This space is avaialble for user code and variables, up to the beginning of the stack. Do not write past STACK_BEGIN
=$009800				STACK_BEGIN      = $009800 ;16384 Bytes The default beginning of stack space
=$00d7ff				STACK_END        = $00D7FF ;0 Byte  End of stack space. Everything below this is I/O space
=$00d800				IO_BEGIN         = $00D800 ; Byte  Beginning of IO space
=$00d800				IO_GAVIN         = $00D800 ;1024 Bytes GAVIN I/O space
=$00dc00				IO_SUPERIO       = $00DC00 ;1024 Bytes SuperIO I/O space
=$00e000				IO_VICKY         = $00E000 ;1024 Bytes VICKY I/O space
=$00e400				IO_BEATRIX       = $00E400 ;1024 Bytes BEATRIX I/O space
=$00e800				IO_RTC           = $00E800 ;1024 Bytes RTC I/O space
=$00ec00				IO_CIA           = $00EC00 ;4864 Bytes CIA I/O space
=$00ff00				IO_END           = $00FF00 ;*End of I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;80 Bytes Handle NMI asserted.
=$00ff90				HIRQ             = $00FF90 ;80 Bytes Handle IRQ. Should read IRQ line from GAVIN and jump to appropriate IRQ handler.
=$00ffe0				ISR_END          = $00FFE0 ;*End of vector space
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Native interrupt vector
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native interrupt vector
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000				VECTORS_END      = $010000 ;*End of vector space

;******  Return to file: kernel.asm


;******  Processing file: monitor_inc.asm

=$f10000				MONITOR     = $F10000
=$f10004				MBREAK      = $F10004
=$f10008				MSTATUS     = $F10008
=$f1000b				MREADY      = $F1000B
=$f10010				MRETURN	    = $F10010
=$f10014				MPARSE      = $F10014

;******  Return to file: kernel.asm


;******  Processing file: kernel_bank_FF.asm

.ffff00	5c 00 00 f8	jmp $f80000	                JML BOOT
.ffff10	5c 20 ff 00	jmp $00ff20	                JMP HBRK
.ffff20					RHBRK
.ffff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ffff22	8b		phb		                PHB
.ffff23	0b		phd		                PHD
.ffff24	48		pha		                PHA
.ffff25	da		phx		                PHX
.ffff26	5a		phy		                PHY
.ffff27	5c 08 00 f8	jmp $f80008	                JML BREAK
.ffff50					RHIRQ
.ffff50	c2 30		rep #$30	                REP #$30        ; set A&X long
.ffff52	8b		phb		                PHB
.ffff53	0b		phd		                PHD
.ffff54	48		pha		                PHA
.ffff55	da		phx		                PHX
.ffff56	5a		phy		                PHY
.ffff57	7a		ply		                PLY
.ffff58	fa		plx		                PLX
.ffff59	68		pla		                PLA
.ffff5a	2b		pld		                PLD
.ffff5b	ab		plb		                PLB
.ffff5c	40		rti		                RTI
.ffffe0					ROM_VECTORS
.ffffe0	5c 0c 00 f8	jmp $f8000c	JUMP_READY      JML READY
>ffffe4	10 ff				RVECTOR_COP     .word $FF10     ; FFE4
>ffffe6	20 ff				RVECTOR_BRK     .word $FF20     ; FFE6
>ffffe8	30 ff				RVECTOR_ABORT   .word $FF30     ; FFE8
>ffffea	40 ff				RVECTOR_NMI     .word $FF40     ; FFEA
>ffffec	00 00				                .word $0000     ; FFEC
>ffffee	50 ff				RVECTOR_IRQ     .word $FF50     ; FFEE
>fffff0	00 00				                .word $0000     ; FFF0
>fffff2	00 00				                .word $0000     ; FFF2
>fffff4	10 ff				RVECTOR_ECOP    .word $FF10     ; FFF4
>fffff6	20 ff				RVECTOR_EBRK    .word $FF20     ; FFF6
>fffff8	30 ff				RVECTOR_EABORT  .word $FF30     ; FFF8
>fffffa	40 ff				RVECTOR_ENMI    .word $FF40     ; FFFA
>fffffc	00 ff				RVECTOR_ERESET  .word $FF00     ; FFFC
>fffffe	50 ff				RVECTOR_EIRQ    .word $FF50     ; FFFE

;******  Return to file: kernel.asm


;******  Processing file: simulator_inc.asm


;******  Return to file: kernel.asm

.f80000	5c 00 04 f8	jmp $f80400	BOOT            JML IBOOT
.f80004	5c 02 06 f8	jmp $f80602	RESTORE         JML IRESTORE
.f80008	5c 7e 04 f8	jmp $f8047e	BREAK           JML IBREAK
.f8000c	5c c1 04 f8	jmp $f804c1	READY           JML IREADY
.f80010	5c 03 06 f8	jmp $f80603	SCINIT          JML ISCINIT
.f80014	5c 04 06 f8	jmp $f80604	IOINIT          JML IIOINIT
.f80018	5c 3d 05 f8	jmp $f8053d	PUTC            JML IPUTC
.f8001c	5c 26 05 f8	jmp $f80526	PUTS            JML IPUTS
.f80020	5c 6a 05 f8	jmp $f8056a	PUTB            JML IPUTB
.f80024	5c 05 06 f8	jmp $f80605	PUTBLOCK        JML IPUTBLOCK
.f80028	5c 06 06 f8	jmp $f80606	SETLFS          JML ISETLFS
.f8002c	5c 07 06 f8	jmp $f80607	SETNAM          JML ISETNAM
.f80030	5c 08 06 f8	jmp $f80608	OPEN            JML IOPEN
.f80034	5c 09 06 f8	jmp $f80609	CLOSE           JML ICLOSE
.f80038	5c 0a 06 f8	jmp $f8060a	SETIN           JML ISETIN
.f8003c	5c 0b 06 f8	jmp $f8060b	SETOUT          JML ISETOUT
.f80040	5c 0c 06 f8	jmp $f8060c	GETB            JML IGETB
.f80044	5c 0d 06 f8	jmp $f8060d	GETBLOCK        JML IGETBLOCK
.f80048	5c 0e 06 f8	jmp $f8060e	GETCH           JML IGETCH
.f8004c	5c ec 04 f8	jmp $f804ec	GETCHW          JML IGETCHW
.f80050	5c e3 04 f8	jmp $f804e3	GETCHE          JML IGETCHE
.f80054	5c 0f 06 f8	jmp $f8060f	GETS            JML IGETS
.f80058	5c 10 06 f8	jmp $f80610	GETLINE         JML IGETLINE
.f8005c	5c 11 06 f8	jmp $f80611	GETFIELD        JML IGETFIELD
.f80060	5c 12 06 f8	jmp $f80612	TRIM            JML ITRIM
.f80064	5c 13 06 f8	jmp $f80613	PRINTC          JML IPRINTC
.f80068	5c 14 06 f8	jmp $f80614	PRINTS          JML IPRINTS
.f8006c	5c 6b 05 f8	jmp $f8056b	PRINTCR         JML IPRINTCR
.f80070	5c 15 06 f8	jmp $f80615	PRINTF          JML IPRINTF
.f80074	5c 16 06 f8	jmp $f80616	PRINTI          JML IPRINTI
.f80078	5c 17 06 f8	jmp $f80617	PRINTH          JML IPRINTH
.f8007c	5c 18 06 f8	jmp $f80618	PRINTAI         JML IPRINTAI
.f80080	5c 19 06 f8	jmp $f80619	PRINTAH         JML IPRINTAH
.f80084	5c b9 05 f8	jmp $f805b9	LOCATE          JML ILOCATE
.f80088	5c 1a 06 f8	jmp $f8061a	PUSHKEY         JML IPUSHKEY
.f8008c	5c 1b 06 f8	jmp $f8061b	PUSHKEYS        JML IPUSHKEYS
.f80090	5c 8c 05 f8	jmp $f8058c	CSRRIGHT        JML ICSRRIGHT
.f80094	5c 1c 06 f8	jmp $f8061c	CSRLEFT         JML ICSRLEFT
.f80098	5c b7 05 f8	jmp $f805b7	CSRUP           JML ICSRUP
.f8009c	5c b8 05 f8	jmp $f805b8	CSRDOWN         JML ICSRDOWN
.f800a0	5c 1d 06 f8	jmp $f8061d	CSRHOME         JML ICSRHOME
.f800a4	5c e8 05 f8	jmp $f805e8	SCROLLUP        JML ISCROLLUP
.f80400					IBOOT
.f80400	18		clc		                CLC           ; clear the carry flag
.f80401	fb		xce		                XCE           ; move carry to emulation flag.
.f80402	c2 30		rep #$30	                REP #$30        ; set A&X long
.f80404	a9 ff d7	lda #$d7ff	                LDA #STACK_END   ; initialize stack pointer
.f80407	1b		tcs		                TAS
.f80408	48		pha		                PHA             ; begin setdp macro
.f80409	08		php			PHP
.f8040a	c2 20		rep #$20	                REP #$20        ; set A long
.f8040c	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.f8040f	5b		tcd		                TCD
.f80410	28		plp			PLP
.f80411	68		pla		                PLA             ; end setdp macro
.f80412	a9 00 10	lda #$1000	                LDA #$1000      ; store the initial screen buffer location
.f80415	85 0c		sta $0c		                STA SCREENBEGIN
.f80417	e2 20		sep #$20	                SEP #$20        ; set A short
.f80419	a9 00		lda #$00	                LDA #$00
.f8041b	85 0e		sta $0e		                STA SCREENBEGIN+2
.f8041d	c2 20		rep #$20	                REP #$20        ; set A long
.f8041f	a9 00 10	lda #$1000	                LDA #$1000      ; store the initial cursor position
.f80422	85 17		sta $17		                STA CURSORPOS
.f80424	e2 20		sep #$20	                SEP #$20        ; set A short
.f80426	a9 00		lda #$00	                LDA #$00
.f80428	85 19		sta $19		                STA CURSORPOS+2
.f8042a	a2 00 00	ldx #$0000	                LDX #$0
.f8042d	a0 00 00	ldy #$0000	                LDY #$0
.f80430	22 b9 05 f8	jsl $f805b9	                JSL ILOCATE
.f80434	e2 20		sep #$20	                SEP #$20        ; set A short
.f80436	a2 50 00	ldx #$0050	                LDX #80
.f80439	86 0f		stx $0f		                STX COLS_VISIBLE
.f8043b	a0 3c 00	ldy #$003c	                LDY #60
.f8043e	84 13		sty $13		                STY LINES_VISIBLE
.f80440	a2 80 00	ldx #$0080	                LDX #128
.f80443	86 11		stx $11		                STX COLS_PER_LINE
.f80445	a0 40 00	ldy #$0040	                LDY #64
.f80448	84 15		sty $15		                STY LINES_MAX
.f8044a	c2 20		rep #$20	                REP #$20        ; set A long
.f8044c	9c 40 0f	stz $0f40	                STZ KEY_BUFFER_RPOS
.f8044f	9c 42 0f	stz $0f42	                STZ KEY_BUFFER_WPOS
.f80452	c2 30		rep #$30	                REP #$30        ; set A&X long
.f80454	a9 ff 00	lda #$00ff	                LDA #$FF
.f80457	a2 00 ff	ldx #$ff00	                LDX #$FF00
.f8045a	a0 00 ff	ldy #$ff00	                LDY #$FF00
.f8045d	44 ff 00	mvp $00,$ff	                MVP $00, $FF
.f80460					greet
.f80460	48		pha		                PHA             ; begin setdbr macro
.f80461	08		php		                PHP
.f80462	e2 20		sep #$20	                SEP #$20        ; set A short
.f80464	a9 f8		lda #$f8		LDA #`greet_msg
.f80466	48		pha		                PHA
.f80467	ab		plb		                PLB
.f80468	28		plp		                PLP
.f80469	68		pla		                PLA             ; end setdbr macro
.f8046a	a2 00 f0	ldx #$f000	                LDX #<>greet_msg
.f8046d	22 1d 05 f8	jsl $f8051d	                JSL IPRINT       ; print the first line
.f80471	e2 20		sep #$20	                SEP #$20        ; set A short
.f80473	48		pha		                PHA             ; begin setdbr macro
.f80474	08		php		                PHP
.f80475	e2 20		sep #$20	                SEP #$20        ; set A short
.f80477	a9 01		lda #$01		LDA #$01
.f80479	48		pha		                PHA
.f8047a	ab		plb		                PLB
.f8047b	28		plp		                PLP
.f8047c	68		pla		                PLA             ; end setdbr macro
.f8047d	00		brk #		greet_done      BRK             ;Terminate boot routine and go to Ready handler.
.f8047e					IBREAK
.f8047e	48		pha		                PHA             ; begin setdp macro
.f8047f	08		php			PHP
.f80480	c2 20		rep #$20	                REP #$20        ; set A long
.f80482	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.f80485	5b		tcd		                TCD
.f80486	28		plp			PLP
.f80487	68		pla		                PLA             ; end setdp macro
.f80488	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.f80489	8f f8 01 00	sta $0001f8	                STA CPUY
.f8048d	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.f8048e	8f f6 01 00	sta $0001f6	                STA CPUX
.f80492	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.f80493	8f f4 01 00	sta $0001f4	                STA CPUA
.f80497	68		pla		                PLA
.f80498	8f fc 01 00	sta $0001fc	                STA CPUDP       ; Pull Direct page
.f8049c	e2 20		sep #$20	                SEP #$20        ; set A short
.f8049e	68		pla		                PLA             ; Pull Data Bank (8 bits)
.f8049f	8f f3 01 00	sta $0001f3	                STA CPUDBR
.f804a3	68		pla		                PLA             ; Pull Flags (8 bits)
.f804a4	8f fe 01 00	sta $0001fe	                STA CPUFLAGS
.f804a8	c2 20		rep #$20	                REP #$20        ; set A long
.f804aa	68		pla		                PLA             ; Pull Program Counter (16 bits)
.f804ab	8f f0 01 00	sta $0001f0	                STA CPUPC
.f804af	e2 20		sep #$20	                SEP #$20        ; set A short
.f804b1	68		pla		                PLA             ; Pull Program Bank (8 bits)
.f804b2	8f f2 01 00	sta $0001f2	                STA CPUPBR
.f804b6	c2 20		rep #$20	                REP #$20        ; set A long
.f804b8	3b		tsc		                TSA             ; Get the stack
.f804b9	8f fa 01 00	sta $0001fa	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.f804bd	a9 ff d7	lda #$d7ff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.f804c0	1b		tcs		                TAS
.f804c1					IREADY
.f804c1	48		pha		                PHA             ; begin setdbr macro
.f804c2	08		php		                PHP
.f804c3	e2 20		sep #$20	                SEP #$20        ; set A short
.f804c5	a9 f8		lda #$f8		LDA #`ready_msg
.f804c7	48		pha		                PHA
.f804c8	ab		plb		                PLB
.f804c9	28		plp		                PLP
.f804ca	68		pla		                PLA             ; end setdbr macro
.f804cb	e2 20		sep #$20	                SEP #$20        ; set A short
.f804cd	a2 65 f0	ldx #$f065	                LDX #<>ready_msg
.f804d0	22 1d 05 f8	jsl $f8051d	                JSL IPRINT
.f804d4					IREADYWAIT
.f804d4	22 e3 04 f8	jsl $f804e3	                JSL IGETCHE
.f804d8	b0 fa		bcs $f804d4	                BCS IREADYWAIT
.f804da	22 3d 05 f8	jsl $f8053d	                JSL IPUTC
.f804de	4c d4 04	jmp $f804d4	                JMP IREADYWAIT
.f804e1	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.f804e2	db		stp		IRETURN         STP
.f804e3	22 ec 04 f8	jsl $f804ec	IGETCHE         JSL IGETCHW
.f804e7	22 3d 05 f8	jsl $f8053d	                JSL IPUTC
.f804eb	6b		rtl		                RTL
.f804ec	0b		phd		IGETCHW         PHD
.f804ed	da		phx		                PHX
.f804ee	08		php		                PHP
.f804ef	48		pha		                PHA             ; begin setdp macro
.f804f0	08		php			PHP
.f804f1	c2 20		rep #$20	                REP #$20        ; set A long
.f804f3	a9 00 0f	lda #$0f00	                LDA #$0F00         ; set DP to page 0
.f804f6	5b		tcd		                TCD
.f804f7	28		plp			PLP
.f804f8	68		pla		                PLA             ; end setdp macro
.f804f9	c2 30		rep #$30	                REP #$30        ; set A&X long
.f804fb	a6 40		ldx $0f40	igetchw1        LDX KEY_BUFFER_RPOS
.f804fd	e4 42		cpx $0f42	                CPX KEY_BUFFER_WPOS
.f804ff	d0 05		bne $f80506	                BNE igetchw2
>f80501	42 00				                .byte $42, $00
.f80503	4c fb 04	jmp $f804fb	                JMP igetchw1
.f80506	b5 00		lda $0f00,x	igetchw2        LDA $0,D,X  ; Read the value in the keyboard buffer
.f80508	48		pha		                PHA
.f80509	8a		txa		                TXA
.f8050a	18		clc		                CLC
.f8050b	69 02 00	adc #$0002	                ADC #$02
.f8050e	c9 40 00	cmp #$0040	                CMP #KEY_BUFFER_LEN
.f80511	90 03		bcc $f80516	                BCC igetchw3
.f80513	a9 00 00	lda #$0000	                LDA #$0
.f80516	85 40		sta $0f40	igetchw3        STA KEY_BUFFER_RPOS
.f80518	68		pla		                PLA
.f80519	28		plp		igetchw_done    PLP
.f8051a	fa		plx		                PLX             ; Restore the saved registers and return
.f8051b	2b		pld		                PLD
.f8051c	6b		rtl		                RTL
.f8051d	22 26 05 f8	jsl $f80526	IPRINT          JSL IPUTS
.f80521	22 6b 05 f8	jsl $f8056b	                JSL IPRINTCR
.f80525	6b		rtl		                RTL
.f80526	48		pha		IPUTS           PHA
.f80527	08		php		                PHP
.f80528	e2 20		sep #$20	                SEP #$20        ; set A short
.f8052a	c2 10		rep #$10	                REP #$10        ; set X long
.f8052c	bd 00 00	lda $f80000,x	iputs1          LDA $0,b,x      ; read from the string
.f8052f	f0 08		beq $f80539	                BEQ iputs_done
.f80531	22 3d 05 f8	jsl $f8053d	iputs2          JSL IPUTC
.f80535	e8		inx		iputs3          INX
.f80536	4c 2c 05	jmp $f8052c	                JMP iputs1
.f80539	e8		inx		iputs_done      INX
.f8053a	28		plp		                PLP
.f8053b	68		pla		                PLA
.f8053c	6b		rtl		                RTL
.f8053d	0b		phd		IPUTC           PHD
.f8053e	08		php		                PHP             ; stash the flags (we'll be changing M)
.f8053f	48		pha		                PHA             ; begin setdp macro
.f80540	08		php			PHP
.f80541	c2 20		rep #$20	                REP #$20        ; set A long
.f80543	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.f80546	5b		tcd		                TCD
.f80547	28		plp			PLP
.f80548	68		pla		                PLA             ; end setdp macro
.f80549	e2 20		sep #$20	                SEP #$20        ; set A short
.f8054b	c9 0d		cmp #$0d	                CMP #$0D        ; handle CR
.f8054d	d0 06		bne $f80555	                BNE iputc_bs
.f8054f	22 6b 05 f8	jsl $f8056b	                JSL IPRINTCR
.f80553	80 10		bra $f80565	                bra iputc_done
.f80555	c9 08		cmp #$08	iputc_bs        CMP #$08        ; backspace
.f80557	d0 06		bne $f8055f	                BNE iputc_print
.f80559	22 7c 05 f8	jsl $f8057c	                JSL IPRINTBS
.f8055d	80 06		bra $f80565	                BRA iputc_done
.f8055f	87 17		sta [$17]	iputc_print     STA [CURSORPOS] ; Save the character on the screen
.f80561	22 8c 05 f8	jsl $f8058c	                JSL ICSRRIGHT
.f80565					iputc_done
>f80565	42 01				                .byte $42, $01
.f80567	28		plp		                PLP
.f80568	2b		pld		                PLD
.f80569	6b		rtl		                RTL
.f8056a					IPUTB
.f8056a	6b		rtl		                RTL
.f8056b	da		phx		IPRINTCR	PHX
.f8056c	5a		phy		                PHY
.f8056d	08		php		                PHP
.f8056e	a2 00 00	ldx #$0000	                LDX #0
.f80571	a4 1c		ldy $1c		                LDY CURSORY
.f80573	c8		iny		                INY
.f80574	22 b9 05 f8	jsl $f805b9	                JSL ILOCATE
.f80578	28		plp		                PLP
.f80579	7a		ply		                PLY
.f8057a	fa		plx		                PLX
.f8057b	6b		rtl		                RTL
.f8057c	da		phx		IPRINTBS	PHX
.f8057d	5a		phy		                PHY
.f8057e	08		php		                PHP
.f8057f	a6 1a		ldx $1a		                LDX CURSORX
.f80581	a4 1c		ldy $1c		                LDY CURSORY
.f80583	ca		dex		                DEX
.f80584	22 b9 05 f8	jsl $f805b9	                JSL ILOCATE
.f80588	28		plp		                PLP
.f80589	7a		ply		                PLY
.f8058a	fa		plx		                PLX
.f8058b	6b		rtl		                RTL
.f8058c					ICSRRIGHT
.f8058c	da		phx		                PHX
.f8058d	8b		phb		                PHB
.f8058e	c2 20		rep #$20	                REP #$20        ; set A long
.f80590	c2 10		rep #$10	                REP #$10        ; set X long
.f80592	48		pha		                PHA             ; begin setdp macro
.f80593	08		php			PHP
.f80594	c2 20		rep #$20	                REP #$20        ; set A long
.f80596	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.f80599	5b		tcd		                TCD
.f8059a	28		plp			PLP
.f8059b	68		pla		                PLA             ; end setdp macro
.f8059c	e6 17		inc $17		                INC CURSORPOS
.f8059e	a6 1a		ldx $1a		                LDX CURSORX
.f805a0	e8		inx		                INX
.f805a1	e4 0f		cpx $0f		                CPX COLS_VISIBLE
.f805a3	90 0c		bcc $f805b1	                BCC icsr_nowrap  ; wrap if the cursor is at or past column 80
.f805a5	a2 00 00	ldx #$0000	                LDX #0
.f805a8	5a		phy		                PHY
.f805a9	a4 1c		ldy $1c		                LDY CURSORY
.f805ab	c8		iny		                INY
.f805ac	22 b9 05 f8	jsl $f805b9	                JSL ILOCATE
.f805b0	7a		ply		                PLY
.f805b1	86 1a		stx $1a		icsr_nowrap     STX CURSORX
.f805b3	ab		plb		                PLB
.f805b4	fa		plx		                PLX
.f805b5	6b		rtl		                RTL
.f805b6	6b		rtl		ISRLEFT	RTL
.f805b7	6b		rtl		ICSRUP	RTL
.f805b8	6b		rtl		ICSRDOWN	RTL
.f805b9	48		pha		ILOCATE         PHA
.f805ba	08		php		                PHP
.f805bb	c2 20		rep #$20	                REP #$20        ; set A long
.f805bd	c2 10		rep #$10	                REP #$10        ; set X long
.f805bf					ilocate_scroll
.f805bf	c4 13		cpy $13		                CPY LINES_VISIBLE
.f805c1	90 07		bcc $f805ca	                BCC ilocate_scrolldone
.f805c3	22 e8 05 f8	jsl $f805e8	                JSL ISCROLLUP
.f805c7	88		dey		                DEY
.f805c8	80 f5		bra $f805bf	                BRA ilocate_scroll
.f805ca					ilocate_scrolldone
.f805ca	86 1a		stx $1a		                STX CURSORX
.f805cc	84 1c		sty $1c		                STY CURSORY
.f805ce					ilocate_row
.f805ce	c0 00 00	cpy #$0000	                CPY #$0
.f805d1	f0 0b		beq $f805de	                BEQ ilocate_right
.f805d3	a5 0c		lda $0c		                LDA SCREENBEGIN
.f805d5	18		clc		ilocate_down    CLC
.f805d6	65 11		adc $11		                ADC COLS_PER_LINE
.f805d8	88		dey		                DEY
.f805d9	f0 03		beq $f805de	                BEQ ilocate_right
.f805db	4c d5 05	jmp $f805d5	                JMP ilocate_down
.f805de	18		clc		ilocate_right   CLC
.f805df	a4 1c		ldy $1c		                LDY CURSORY
.f805e1	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.f805e3	85 17		sta $17		                STA CURSORPOS
.f805e5	28		plp		ilocate_done    PLP
.f805e6	68		pla		                PLA
.f805e7	6b		rtl		                RTL
.f805e8					ISCROLLUP
.f805e8	48		pha		                PHA
.f805e9	da		phx		                PHX
.f805ea	5a		phy		                PHY
.f805eb	8b		phb		                PHB
.f805ec	08		php		                PHP
.f805ed	c2 30		rep #$30	                REP #$30        ; set A&X long
.f805ef	18		clc		                CLC
.f805f0	a5 0c		lda $0c		                LDA SCREENBEGIN
.f805f2	a8		tay		                TAY             ; Destination is first row
.f805f3	65 11		adc $11		                ADC COLS_PER_LINE
.f805f5	aa		tax		                TAX             ; Source is second row
.f805f6	a9 ef 1f	lda #$1fef	                LDA #SCREEN_PAGE1-SCREEN_PAGE0-COLS_PER_LINE
.f805f9	44 00 00	mvp $00,$00	                MVP $00,$00
.f805fc	28		plp		                PLP
.f805fd	ab		plb		                PLB
.f805fe	7a		ply		                PLY
.f805ff	fa		plx		                PLX
.f80600	68		pla		                PLA
.f80601	6b		rtl		                RTL
.f80602	00		brk #		IRESTORE        BRK ; Warm boot routine
.f80603	00		brk #		ISCINIT         BRK ;
.f80604	00		brk #		IIOINIT         BRK ;
.f80605	00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.f80606	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.f80607	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.f80608	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.f80609	00		brk #		ICLOSE          BRK ; Close a channel
.f8060a	00		brk #		ISETIN          BRK ; Set the current input channel
.f8060b	00		brk #		ISETOUT         BRK ; Set the current output channel
.f8060c	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.f8060d	00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.f8060e	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.f8060f	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.f80610	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.f80611	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.f80612	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.f80613	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.f80614	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.f80615	00		brk #		IPRINTF         BRK ; Print a float value
.f80616	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.f80617	00		brk #		IPRINTH         BRK ; Print Hex value in DP variable
.f80618	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.f80619	00		brk #		IPRINTAH        BRK ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
.f8061a	00		brk #		IPUSHKEY        BRK ;
.f8061b	00		brk #		IPUSHKEYS       BRK ;
.f8061c	00		brk #		ICSRLEFT        BRK ;
.f8061d	00		brk #		ICSRHOME        BRK ;
>f8f000	20 20 2f 2f 2f 2f 2f 20		greet_msg       .text "  ///// FOENIX 256 DEVELOPMENT SYSTEM",$0D
>f8f008	46 4f 45 4e 49 58 20 32 35 36 20 44 45 56 45 4c
>f8f018	4f 50 4d 45 4e 54 20 53 59 53 54 45 4d 0d
>f8f026	20 2f 2f 2f 2f 2f 20 20		greet_msg1      .text " /////  OPEN SOURCE COMPUTER",$0D
>f8f02e	4f 50 45 4e 20 53 4f 55 52 43 45 20 43 4f 4d 50
>f8f03e	55 54 45 52 0d
>f8f043	2f 2f 2f 2f 2f 20 20 20		greet_msg2      .text "/////   8192KB SYSTEM 8128KB FREE",$00
>f8f04b	38 31 39 32 4b 42 20 53 59 53 54 45 4d 20 38 31
>f8f05b	32 38 4b 42 20 46 52 45 45 00
>f8f065	0d 52 45 41 44 59 2e 00		ready_msg       .text $0D,"READY.",$00
>f8f06d	3b 46 38 31 30 30 30 20		                .text ";F81000 0000 0000 0000 D6FF F8  0000 ------Z-",$00
>f8f075	30 30 30 30 20 30 30 30 30 20 30 30 30 30 20 44
>f8f085	36 46 46 20 46 38 20 20 30 30 30 30 20 2d 2d 2d
>f8f095	2d 2d 2d 5a 2d 00
>f8f09b	31 30 20 50 52 49 4e 54		hello_basic     .text "10 PRINT ""Hello World""",$0D
>f8f0a3	20 22 48 65 6c 6c 6f 20 57 6f 72 6c 64 22 0d
>f8f0b2	52 55 4e 0d			                .text "RUN",$0D
>f8f0b6	48 65 6c 6c 6f 20 57 6f		                .text "Hello World",$0D
>f8f0be	72 6c 64 0d
>f8f0c2	0d 52 45 41 44 59 2e 00		                .text $0D,"READY.",$00
>f8f0ca	47 20 30 32 30 30 30 30		hello_ml        .text "G 020000",$0D
>f8f0d2	0d
>f8f0d3	48 45 4c 4c 4f 20 57 4f		                .text "HELLO WORLD",$0D
>f8f0db	52 4c 44 0d
>f8f0df	0d				                .text $0D
>f8f0e0	20 50 43 20 20 20 20 20		                .text " PC     A    X    Y    SP   DBR DP   NVMXDIZC",$0D
>f8f0e8	41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>f8f0f8	50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>f8f108	58 44 49 5a 43 0d
>f8f10e	3b 30 30 32 31 31 32 20		                .text ";002112 0019 F0AA 0000 D6FF F8  0000 --M-----",$00
>f8f116	30 30 31 39 20 46 30 41 41 20 30 30 30 30 20 44
>f8f126	36 46 46 20 46 38 20 20 30 30 30 30 20 2d 2d 4d
>f8f136	2d 2d 2d 2d 2d 00
>f8f13c	41 42 4f 52 54 20 45 52		error_01        .text "ABORT ERROR",$00
>f8f144	52 4f 52 00

;******  End of listing
